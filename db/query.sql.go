// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
)

const addChannelSync = `-- name: AddChannelSync :one
INSERT INTO files_to_sync (file_to_sync_uri, discord_guild_snowflake, discord_channel_snowflake)
VALUES ($1, $2, $3)
ON CONFLICT (discord_guild_snowflake, discord_channel_snowflake)
DO UPDATE SET file_to_sync_uri = $1
RETURNING file_to_sync_uri, discord_guild_snowflake, discord_channel_snowflake, id, file_contents
`

type AddChannelSyncParams struct {
	FileToSyncUri           string
	DiscordGuildSnowflake   string
	DiscordChannelSnowflake string
}

func (q *Queries) AddChannelSync(ctx context.Context, arg AddChannelSyncParams) (FilesToSync, error) {
	row := q.db.QueryRow(ctx, addChannelSync, arg.FileToSyncUri, arg.DiscordGuildSnowflake, arg.DiscordChannelSnowflake)
	var i FilesToSync
	err := row.Scan(
		&i.FileToSyncUri,
		&i.DiscordGuildSnowflake,
		&i.DiscordChannelSnowflake,
		&i.ID,
		&i.FileContents,
	)
	return i, err
}

const addFileContentChunks = `-- name: AddFileContentChunks :many
INSERT INTO file_chunk_messages (files_to_sync_fk, chunk_number, discord_message_id)
VALUES ($1, unnest($2::int[]), unnest($3::varchar(20)[]))
ON CONFLICT (discord_message_id)
  DO UPDATE SET
    chunk_number = excluded.chunk_number
    ,discord_message_id = excluded.discord_message_id
RETURNING id, files_to_sync_fk, chunk_number, discord_message_id
`

type AddFileContentChunksParams struct {
	FilesToSyncFk     int64
	ChunkNumbers      []int32
	DiscordMessageIds []string
}

func (q *Queries) AddFileContentChunks(ctx context.Context, arg AddFileContentChunksParams) ([]FileChunkMessage, error) {
	rows, err := q.db.Query(ctx, addFileContentChunks, arg.FilesToSyncFk, arg.ChunkNumbers, arg.DiscordMessageIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FileChunkMessage
	for rows.Next() {
		var i FileChunkMessage
		if err := rows.Scan(
			&i.ID,
			&i.FilesToSyncFk,
			&i.ChunkNumber,
			&i.DiscordMessageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const addGithubRepoFile = `-- name: AddGithubRepoFile :one
INSERT INTO github_repo_files (github_repo_url, file_to_sync_fk)
VALUES ($1, $2)
ON CONFLICT (file_to_sync_fk)
  DO UPDATE SET github_repo_url = $1
RETURNING id, github_repo_url, file_to_sync_fk
`

type AddGithubRepoFileParams struct {
	GithubRepoUrl string
	FileToSyncFk  int64
}

func (q *Queries) AddGithubRepoFile(ctx context.Context, arg AddGithubRepoFileParams) (GithubRepoFile, error) {
	row := q.db.QueryRow(ctx, addGithubRepoFile, arg.GithubRepoUrl, arg.FileToSyncFk)
	var i GithubRepoFile
	err := row.Scan(&i.ID, &i.GithubRepoUrl, &i.FileToSyncFk)
	return i, err
}

const getChannelSync = `-- name: GetChannelSync :one
SELECT file_to_sync_uri, discord_guild_snowflake, discord_channel_snowflake, id, file_contents
FROM files_to_sync
WHERE file_to_sync_uri = $1
`

func (q *Queries) GetChannelSync(ctx context.Context, fileUri string) (FilesToSync, error) {
	row := q.db.QueryRow(ctx, getChannelSync, fileUri)
	var i FilesToSync
	err := row.Scan(
		&i.FileToSyncUri,
		&i.DiscordGuildSnowflake,
		&i.DiscordChannelSnowflake,
		&i.ID,
		&i.FileContents,
	)
	return i, err
}

const getFileContentChunks = `-- name: GetFileContentChunks :many
SELECT
  fcm.chunk_number
  ,fcm.discord_message_id
FROM file_chunk_messages fcm
JOIN files_to_sync fts ON fts.id = fcm.files_to_sync_fk
WHERE fts.discord_channel_snowflake = $1
`

type GetFileContentChunksRow struct {
	ChunkNumber      int32
	DiscordMessageID string
}

func (q *Queries) GetFileContentChunks(ctx context.Context, channelID string) ([]GetFileContentChunksRow, error) {
	rows, err := q.db.Query(ctx, getFileContentChunks, channelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFileContentChunksRow
	for rows.Next() {
		var i GetFileContentChunksRow
		if err := rows.Scan(&i.ChunkNumber, &i.DiscordMessageID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGithubRepoSyncFiles = `-- name: GetGithubRepoSyncFiles :many
SELECT
  fts.id AS files_to_sync_id
  ,fts.file_to_sync_uri AS url
  ,fts.file_contents AS file_contents
  ,fts.discord_guild_snowflake AS guild_id
  ,fts.discord_channel_snowflake AS channel_id
FROM github_repo_files grf
  JOIN files_to_sync fts ON fts.id = grf.file_to_sync_fk
WHERE grf.github_repo_url = $1
`

type GetGithubRepoSyncFilesRow struct {
	FilesToSyncID int64
	Url           string
	FileContents  string
	GuildID       string
	ChannelID     string
}

func (q *Queries) GetGithubRepoSyncFiles(ctx context.Context, githubRepoUrl string) ([]GetGithubRepoSyncFilesRow, error) {
	rows, err := q.db.Query(ctx, getGithubRepoSyncFiles, githubRepoUrl)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGithubRepoSyncFilesRow
	for rows.Next() {
		var i GetGithubRepoSyncFilesRow
		if err := rows.Scan(
			&i.FilesToSyncID,
			&i.Url,
			&i.FileContents,
			&i.GuildID,
			&i.ChannelID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGuildChannelSync = `-- name: GetGuildChannelSync :one
SELECT file_to_sync_uri, discord_guild_snowflake, discord_channel_snowflake, id, file_contents FROM files_to_sync
WHERE discord_guild_snowflake = $1
  AND discord_channel_snowflake = $2
`

type GetGuildChannelSyncParams struct {
	GuildID   string
	ChannelID string
}

func (q *Queries) GetGuildChannelSync(ctx context.Context, arg GetGuildChannelSyncParams) (FilesToSync, error) {
	row := q.db.QueryRow(ctx, getGuildChannelSync, arg.GuildID, arg.ChannelID)
	var i FilesToSync
	err := row.Scan(
		&i.FileToSyncUri,
		&i.DiscordGuildSnowflake,
		&i.DiscordChannelSnowflake,
		&i.ID,
		&i.FileContents,
	)
	return i, err
}

const getGuildSyncs = `-- name: GetGuildSyncs :many
SELECT file_to_sync_uri, discord_guild_snowflake, discord_channel_snowflake, id, file_contents FROM files_to_sync
WHERE discord_guild_snowflake = $1
`

func (q *Queries) GetGuildSyncs(ctx context.Context, discordGuildSnowflake string) ([]FilesToSync, error) {
	rows, err := q.db.Query(ctx, getGuildSyncs, discordGuildSnowflake)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FilesToSync
	for rows.Next() {
		var i FilesToSync
		if err := rows.Scan(
			&i.FileToSyncUri,
			&i.DiscordGuildSnowflake,
			&i.DiscordChannelSnowflake,
			&i.ID,
			&i.FileContents,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeFileContentChunks = `-- name: RemoveFileContentChunks :exec
DELETE FROM file_chunk_messages WHERE files_to_sync_fk = $1
`

func (q *Queries) RemoveFileContentChunks(ctx context.Context, fileToSyncFk int64) error {
	_, err := q.db.Exec(ctx, removeFileContentChunks, fileToSyncFk)
	return err
}

const setFileSyncContents = `-- name: SetFileSyncContents :exec
UPDATE files_to_sync
SET file_contents = $1
WHERE discord_channel_snowflake = $2
`

type SetFileSyncContentsParams struct {
	FileContents string
	ChannelID    string
}

func (q *Queries) SetFileSyncContents(ctx context.Context, arg SetFileSyncContentsParams) error {
	_, err := q.db.Exec(ctx, setFileSyncContents, arg.FileContents, arg.ChannelID)
	return err
}
