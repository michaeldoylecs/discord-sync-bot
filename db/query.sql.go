// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addChannelSync = `-- name: AddChannelSync :one
INSERT INTO files_to_sync (file_to_sync_uri, discord_guild_snowflake, discord_channel_snowflake)
VALUES ($1, $2, $3)
ON CONFLICT (discord_guild_snowflake, discord_channel_snowflake)
DO UPDATE SET file_to_sync_uri = $1
RETURNING file_to_sync_uri, discord_guild_snowflake, discord_channel_snowflake
`

type AddChannelSyncParams struct {
	FileToSyncUri           pgtype.Text
	DiscordGuildSnowflake   string
	DiscordChannelSnowflake string
}

func (q *Queries) AddChannelSync(ctx context.Context, arg AddChannelSyncParams) (FilesToSync, error) {
	row := q.db.QueryRow(ctx, addChannelSync, arg.FileToSyncUri, arg.DiscordGuildSnowflake, arg.DiscordChannelSnowflake)
	var i FilesToSync
	err := row.Scan(&i.FileToSyncUri, &i.DiscordGuildSnowflake, &i.DiscordChannelSnowflake)
	return i, err
}

const getGuildSyncs = `-- name: GetGuildSyncs :many
SELECT file_to_sync_uri, discord_guild_snowflake, discord_channel_snowflake FROM files_to_sync
WHERE discord_guild_snowflake = $1
`

func (q *Queries) GetGuildSyncs(ctx context.Context, discordGuildSnowflake string) ([]FilesToSync, error) {
	rows, err := q.db.Query(ctx, getGuildSyncs, discordGuildSnowflake)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FilesToSync
	for rows.Next() {
		var i FilesToSync
		if err := rows.Scan(&i.FileToSyncUri, &i.DiscordGuildSnowflake, &i.DiscordChannelSnowflake); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
